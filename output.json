Resources:
  AuthorizationUserPoolsmsRoleD2B0C01D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: AIEPStackAuthorizationUserPool3D99DCF4
            Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: sns-publish
    Metadata:
      aws:cdk:path: AIEPStack/Authorization/UserPool/smsRole/Resource
  AuthorizationUserPool114F25B4:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_phone_number
            Priority: 1
          - Name: verified_email
            Priority: 2
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
        - email
        - phone_number
      EmailVerificationMessage: The verification code to your new account is {####}
      EmailVerificationSubject: Verify your new account
      EnabledMfas:
        - SMS_MFA
      LambdaConfig:
        PostConfirmation:
          Fn::GetAtt:
            - ChatbotAPICognitoTriggerFunctionBF558261
            - Arn
      MfaConfiguration: OPTIONAL
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: role
          StringAttributeConstraints:
            MaxLength: "30"
            MinLength: "0"
      SmsConfiguration:
        ExternalId: AIEPStackAuthorizationUserPool3D99DCF4
        SnsCallerArn:
          Fn::GetAtt:
            - AuthorizationUserPoolsmsRoleD2B0C01D
            - Arn
      SmsVerificationMessage: The verification code to your new account is {####}
      UserPoolAddOns:
        AdvancedSecurityMode: ENFORCED
      UsernameAttributes:
        - email
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: The verification code to your new account is {####}
        EmailSubject: Verify your new account
        SmsMessage: The verification code to your new account is {####}
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/Authorization/UserPool/Resource
  AuthorizationUserPoolCognitoDomain7EF39E06:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: a-iep
      UserPoolId:
        Ref: AuthorizationUserPool114F25B4
    Metadata:
      aws:cdk:path: AIEPStack/Authorization/UserPool/CognitoDomain/Resource
  AuthorizationUserPoolPostConfirmationCognito55205A40:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPICognitoTriggerFunctionBF558261
          - Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - AuthorizationUserPool114F25B4
          - Arn
    Metadata:
      aws:cdk:path: AIEPStack/Authorization/UserPool/PostConfirmationCognito
  AuthorizationUserPoolClient8E2989BE:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - implicit
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - profile
        - phone
        - email
        - openid
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - https://example.com
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId:
        Ref: AuthorizationUserPool114F25B4
    Metadata:
      aws:cdk:path: AIEPStack/Authorization/UserPoolClient/Resource
  AuthorizationAuthorizationFunctionServiceRole09B7CF46:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/Authorization/AuthorizationFunction/ServiceRole/Resource
  AuthorizationAuthorizationFunctionB35B7A4C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 93d52d4f06778d0ced4e87b6b9d3d2166387115eb9c5547d71ca431c85d493bd.zip
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: AuthorizationUserPool114F25B4
          APP_CLIENT_ID:
            Ref: AuthorizationUserPoolClient8E2989BE
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - AuthorizationAuthorizationFunctionServiceRole09B7CF46
          - Arn
      Runtime: python3.12
      Timeout: 30
    DependsOn:
      - AuthorizationAuthorizationFunctionServiceRole09B7CF46
    Metadata:
      aws:cdk:path: AIEPStack/Authorization/AuthorizationFunction/Resource
      aws:asset:path: asset.93d52d4f06778d0ced4e87b6b9d3d2166387115eb9c5547d71ca431c85d493bd
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIChatHistoryTable86F70C1D:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: time_stamp
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: TimeIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: time_stamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: session_id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/ChatHistoryTable/Resource
  ChatbotAPIUserFeedbackTableF734E54F:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Topic
          AttributeType: S
        - AttributeName: CreatedAt
          AttributeType: S
        - AttributeName: Any
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: CreatedAt
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: AnyIndex
          KeySchema:
            - AttributeName: Any
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      KeySchema:
        - AttributeName: Topic
          KeyType: HASH
        - AttributeName: CreatedAt
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/UserFeedbackTable/Resource
  ChatbotAPIEvaluationSummariesTableE9B95A54:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PartitionKey
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: PartitionKey
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/EvaluationSummariesTable/Resource
  ChatbotAPIEvaluationResultsTableE72FCF7C:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: EvaluationId
          AttributeType: S
        - AttributeName: QuestionId
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: QuestionIndex
          KeySchema:
            - AttributeName: EvaluationId
              KeyType: HASH
            - AttributeName: QuestionId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      KeySchema:
        - AttributeName: EvaluationId
          KeyType: HASH
        - AttributeName: QuestionId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/EvaluationResultsTable/Resource
  ChatbotAPIActiveSystemPromptsTable6B51A1C3:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PartitionKey
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: PartitionKey
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/ActiveSystemPromptsTable/Resource
  ChatbotAPIStagedSystemPromptsTable33F4F68A:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PartitionKey
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: PartitionKey
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StagedSystemPromptsTable/Resource
  ChatbotAPIUserProfilesTable3923A78F:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/UserProfilesTable/Resource
  ChatbotAPIIepDocumentsTable6A6A0420:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: iepId
          AttributeType: S
        - AttributeName: kidId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: "N"
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: byUserId
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: byKidId
          KeySchema:
            - AttributeName: kidId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      KeySchema:
        - AttributeName: iepId
          KeyType: HASH
        - AttributeName: kidId
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/IepDocumentsTable/Resource
  ChatbotAPIKnowledgeSourceBucketD704DDFD:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
            AllowedOrigins:
              - "*"
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/KnowledgeSourceBucket/Resource
  ChatbotAPIKnowledgeSourceBucketPolicy0E7E872E:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ChatbotAPIKnowledgeSourceBucketD704DDFD
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutBucketPolicy
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIKnowledgeSourceBucketD704DDFD
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIKnowledgeSourceBucketD704DDFD
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/KnowledgeSourceBucket/Policy/Resource
  ChatbotAPIKnowledgeSourceBucketAutoDeleteObjectsCustomResourceFB69940F:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: ChatbotAPIKnowledgeSourceBucketD704DDFD
    DependsOn:
      - ChatbotAPIKnowledgeSourceBucketPolicy0E7E872E
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/KnowledgeSourceBucket/AutoDeleteObjectsCustomResource/Default
  ChatbotAPIKnowledgeSourceBucketNotificationsF1680BBF:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: ChatbotAPIKnowledgeSourceBucketD704DDFD
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            LambdaFunctionArn:
              Fn::GetAtt:
                - ChatbotAPIMetadataHandlerFunction7E482D95
                - Arn
      Managed: true
    DependsOn:
      - ChatbotAPIKnowledgeSourceBucketAllowBucketNotificationsToAIEPStackChatbotAPIMetadataHandlerFunctionEE9732FC56B1AC7F
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/KnowledgeSourceBucket/Notifications/Resource
  ChatbotAPIKnowledgeSourceBucketAllowBucketNotificationsToAIEPStackChatbotAPIMetadataHandlerFunctionEE9732FC56B1AC7F:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIMetadataHandlerFunction7E482D95
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
          - ChatbotAPIKnowledgeSourceBucketD704DDFD
          - Arn
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/KnowledgeSourceBucket/AllowBucketNotificationsToAIEPStackChatbotAPIMetadataHandlerFunctionEE9732FC
  ChatbotAPIFeedbackDownloadBucket5357D600:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
            AllowedOrigins:
              - "*"
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/FeedbackDownloadBucket/Resource
  ChatbotAPIFeedbackDownloadBucketPolicyC6BD7A68:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ChatbotAPIFeedbackDownloadBucket5357D600
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutBucketPolicy
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIFeedbackDownloadBucket5357D600
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIFeedbackDownloadBucket5357D600
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/FeedbackDownloadBucket/Policy/Resource
  ChatbotAPIFeedbackDownloadBucketAutoDeleteObjectsCustomResourceF94AF4F5:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: ChatbotAPIFeedbackDownloadBucket5357D600
    DependsOn:
      - ChatbotAPIFeedbackDownloadBucketPolicyC6BD7A68
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/FeedbackDownloadBucket/AutoDeleteObjectsCustomResource/Default
  ChatbotAPIEvalTestCasesBucket3A06FDF6:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
            AllowedOrigins:
              - "*"
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/EvalTestCasesBucket/Resource
  ChatbotAPIEvalTestCasesBucketPolicy96432181:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ChatbotAPIEvalTestCasesBucket3A06FDF6
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutBucketPolicy
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIEvalTestCasesBucket3A06FDF6
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvalTestCasesBucket3A06FDF6
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/EvalTestCasesBucket/Policy/Resource
  ChatbotAPIEvalTestCasesBucketAutoDeleteObjectsCustomResourceB58F8FD0:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: ChatbotAPIEvalTestCasesBucket3A06FDF6
    DependsOn:
      - ChatbotAPIEvalTestCasesBucketPolicy96432181
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/EvalTestCasesBucket/AutoDeleteObjectsCustomResource/Default
  ChatbotAPIOpenSearchCollection967A7D22:
    Type: AWS::OpenSearchServerless::Collection
    Properties:
      Description: OpenSearch Serverless Collection for AIEPStack
      Name: aiepstack-oss-collection
      StandbyReplicas: DISABLED
      Type: VECTORSEARCH
    DependsOn:
      - ChatbotAPIOSSAccessPolicyD2AC8A4A
      - ChatbotAPIOSSEncryptionPolicyD0DCD994
      - ChatbotAPIOSSNetworkPolicy4A8A6195
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/OpenSearchCollection
  ChatbotAPIOSSEncryptionPolicyD0DCD994:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: aiepstack-oss-enc-policy
      Policy: '{"Rules":[{"ResourceType":"collection","Resource":["collection/aiepstack-oss-collection"]}],"AWSOwnedKey":true}'
      Type: encryption
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/OSSEncryptionPolicy
  ChatbotAPIOSSNetworkPolicy4A8A6195:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: aiepstack-oss-network-policy
      Policy: '[{"Rules":[{"ResourceType":"dashboard","Resource":["collection/aiepstack-oss-collection"]},{"ResourceType":"collection","Resource":["collection/aiepstack-oss-collection"]}],"AllowFromPublic":true}]'
      Type: network
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/OSSNetworkPolicy
  ChatbotAPIIndexFunctionRole550B215D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/IndexFunctionRole/Resource
  ChatbotAPIIndexFunctionRoleDefaultPolicyB576B063:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: aoss:*
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:aoss:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :collection/
                  - Fn::GetAtt:
                      - ChatbotAPIOpenSearchCollection967A7D22
                      - Id
        Version: "2012-10-17"
      PolicyName: ChatbotAPIIndexFunctionRoleDefaultPolicyB576B063
      Roles:
        - Ref: ChatbotAPIIndexFunctionRole550B215D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/IndexFunctionRole/DefaultPolicy/Resource
  ChatbotAPIKnowledgeBaseRole6A2BDD18:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/KnowledgeBaseRole/Resource
  ChatbotAPIKnowledgeBaseRoleDefaultPolicyE47AA304:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: aoss:APIAccessAll
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:aoss:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :collection/
                  - Fn::GetAtt:
                      - ChatbotAPIOpenSearchCollection967A7D22
                      - Id
          - Action: s3:*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIKnowledgeSourceBucketD704DDFD
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIKnowledgeSourceBucketD704DDFD
                        - Arn
                    - /*
          - Action: bedrock:InvokeModel
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:bedrock:"
                  - Ref: AWS::Region
                  - ::foundation-model/amazon.titan-embed-text-v2:0
        Version: "2012-10-17"
      PolicyName: ChatbotAPIKnowledgeBaseRoleDefaultPolicyE47AA304
      Roles:
        - Ref: ChatbotAPIKnowledgeBaseRole6A2BDD18
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/KnowledgeBaseRole/DefaultPolicy/Resource
  ChatbotAPIOSSAccessPolicyD2AC8A4A:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: aiepstack-oss-access-policy
      Policy:
        Fn::Join:
          - ""
          - - '[{"Rules":[{"ResourceType":"index","Resource":["index/aiepstack-oss-collection/*"],"Permission":["aoss:UpdateIndex","aoss:DescribeIndex","aoss:ReadDocument","aoss:WriteDocument","aoss:CreateIndex"]},{"ResourceType":"collection","Resource":["collection/aiepstack-oss-collection"],"Permission":["aoss:DescribeCollectionItems","aoss:CreateCollectionItems","aoss:UpdateCollectionItems"]}],"Principal":["'
            - Fn::GetAtt:
                - ChatbotAPIIndexFunctionRole550B215D
                - Arn
            - '","arn:'
            - Ref: AWS::Partition
            - ":iam::"
            - Ref: AWS::AccountId
            - :root","
            - Fn::GetAtt:
                - ChatbotAPIKnowledgeBaseRole6A2BDD18
                - Arn
            - '"]}]'
      Type: data
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/OSSAccessPolicy
  ChatbotAPIOpenSearchCreateIndexFunction1C9A4505:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 9719425a8b69dc66e0adbd52d3e457372bf058e50ec23da48735a13c5f7eed6d.zip
      Environment:
        Variables:
          COLLECTION_ENDPOINT:
            Fn::Join:
              - ""
              - - Fn::GetAtt:
                    - ChatbotAPIOpenSearchCollection967A7D22
                    - Id
                - "."
                - Ref: AWS::Region
                - .aoss.amazonaws.com
          INDEX_NAME: knowledge-base-index
          EMBEDDING_DIM: "1024"
          REGION:
            Ref: AWS::Region
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIIndexFunctionRole550B215D
          - Arn
      Runtime: python3.12
      Timeout: 120
    DependsOn:
      - ChatbotAPIIndexFunctionRoleDefaultPolicyB576B063
      - ChatbotAPIIndexFunctionRole550B215D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/OpenSearchCreateIndexFunction/Resource
      aws:asset:path: asset.9719425a8b69dc66e0adbd52d3e457372bf058e50ec23da48735a13c5f7eed6d
      aws:asset:is-bundled: true
      aws:asset:property: Code
  ChatbotAPICreateIndexFunctionCustomProviderframeworkonEventServiceRoleC0D8AEEE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/CreateIndexFunctionCustomProvider/framework-onEvent/ServiceRole/Resource
  ChatbotAPICreateIndexFunctionCustomProviderframeworkonEventServiceRoleDefaultPolicy7D91D3F3:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIOpenSearchCreateIndexFunction1C9A4505
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIOpenSearchCreateIndexFunction1C9A4505
                        - Arn
                    - :*
        Version: "2012-10-17"
      PolicyName: ChatbotAPICreateIndexFunctionCustomProviderframeworkonEventServiceRoleDefaultPolicy7D91D3F3
      Roles:
        - Ref: ChatbotAPICreateIndexFunctionCustomProviderframeworkonEventServiceRoleC0D8AEEE
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/CreateIndexFunctionCustomProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource
  ChatbotAPICreateIndexFunctionCustomProviderframeworkonEvent9C79A9F1:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 3542be390685e0c8353d92ccb5796d343cd93ca946b6b0de798004206a199adc.zip
      Description: AWS CDK resource provider framework - onEvent (AIEPStack/ChatbotAPI/CreateIndexFunctionCustomProvider)
      Environment:
        Variables:
          USER_ON_EVENT_FUNCTION_ARN:
            Fn::GetAtt:
              - ChatbotAPIOpenSearchCreateIndexFunction1C9A4505
              - Arn
      Handler: framework.onEvent
      Role:
        Fn::GetAtt:
          - ChatbotAPICreateIndexFunctionCustomProviderframeworkonEventServiceRoleC0D8AEEE
          - Arn
      Runtime: nodejs18.x
      Timeout: 900
    DependsOn:
      - ChatbotAPICreateIndexFunctionCustomProviderframeworkonEventServiceRoleDefaultPolicy7D91D3F3
      - ChatbotAPICreateIndexFunctionCustomProviderframeworkonEventServiceRoleC0D8AEEE
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/CreateIndexFunctionCustomProvider/framework-onEvent/Resource
      aws:asset:path: asset.3542be390685e0c8353d92ccb5796d343cd93ca946b6b0de798004206a199adc
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPICreateIndexFunctionCustomResource73D62F40:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - ChatbotAPICreateIndexFunctionCustomProviderframeworkonEvent9C79A9F1
          - Arn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/CreateIndexFunctionCustomResource/Default
  ChatbotAPIKnowledgeBase4F0696AC:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Description: Bedrock Knowledge Base for AIEPStack
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn:
            Fn::Join:
              - ""
              - - "arn:aws:bedrock:"
                - Ref: AWS::Region
                - ::foundation-model/amazon.titan-embed-text-v2:0
      Name: AIEPStack-kb
      RoleArn:
        Fn::GetAtt:
          - ChatbotAPIKnowledgeBaseRole6A2BDD18
          - Arn
      StorageConfiguration:
        OpensearchServerlessConfiguration:
          CollectionArn:
            Fn::GetAtt:
              - ChatbotAPIOpenSearchCollection967A7D22
              - Arn
          FieldMapping:
            MetadataField: metadata_field
            TextField: text_field
            VectorField: vector_field
          VectorIndexName: knowledge-base-index
        Type: OPENSEARCH_SERVERLESS
    DependsOn:
      - ChatbotAPICreateIndexFunctionCustomResource73D62F40
      - ChatbotAPIOpenSearchCollection967A7D22
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/KnowledgeBase
  ChatbotAPIS3DataSource7122E2EC:
    Type: AWS::Bedrock::DataSource
    Properties:
      DataSourceConfiguration:
        S3Configuration:
          BucketArn:
            Fn::GetAtt:
              - ChatbotAPIKnowledgeSourceBucketD704DDFD
              - Arn
        Type: S3
      Description: S3 data source
      KnowledgeBaseId:
        Fn::GetAtt:
          - ChatbotAPIKnowledgeBase4F0696AC
          - KnowledgeBaseId
      Name: AIEPStack-kb-datasource
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: FIXED_SIZE
          FixedSizeChunkingConfiguration:
            MaxTokens: 300
            OverlapPercentage: 10
    DependsOn:
      - ChatbotAPIKnowledgeBase4F0696AC
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/S3DataSource
  ChatbotAPIRestBackendHTTPAPI6A6C7FF4:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      CorsConfiguration:
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
          - X-Amz-User-Agent
          - Accept
          - Origin
          - Access-Control-Request-Method
          - Access-Control-Request-Headers
        AllowMethods:
          - GET
          - HEAD
          - OPTIONS
          - POST
          - PUT
          - DELETE
        AllowOrigins:
          - "*"
        ExposeHeaders:
          - "*"
        MaxAge: 864000
      Name: HTTP-API
      ProtocolType: HTTP
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/Resource
  ChatbotAPIRestBackendHTTPAPIDefaultStage9780EBB8:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AutoDeploy: true
      StageName: $default
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/DefaultStage/Resource
  ChatbotAPIRestBackendHTTPAPIGETusersessionSessionAPIIntegration903EFC6A:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPISessionHandlerFunctionF969576A
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--user-session/SessionAPIIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIGETusersessionSessionAPIIntegrationPermission2A4896B9:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPISessionHandlerFunctionF969576A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/user-session
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--user-session/SessionAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIGETusersession89A9EE88:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: GET /user-session
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETusersessionSessionAPIIntegration903EFC6A
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--user-session/Resource
  ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizerType: JWT
      IdentitySource:
        - $request.header.Authorization
      JwtConfiguration:
        Audience:
          - Ref: AuthorizationUserPoolClient8E2989BE
        Issuer:
          Fn::GetAtt:
            - AuthorizationUserPool114F25B4
            - ProviderURL
      Name: HTTPAuthorizer
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/HTTPAuthorizer/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTusersessionSessionAPIIntegrationPermission932D0FC8:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPISessionHandlerFunctionF969576A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/user-session
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--user-session/SessionAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPOSTusersessionDED62D1B:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: POST /user-session
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETusersessionSessionAPIIntegration903EFC6A
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--user-session/Resource
  ChatbotAPIRestBackendHTTPAPIDELETEusersessionSessionAPIIntegrationPermissionD479EFB0:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPISessionHandlerFunctionF969576A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/user-session
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/DELETE--user-session/SessionAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIDELETEusersession9C8A3724:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: DELETE /user-session
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETusersessionSessionAPIIntegration903EFC6A
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/DELETE--user-session/Resource
  ChatbotAPIRestBackendHTTPAPIGETuserfeedbackFeedbackAPIIntegration10D18D1C:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPIFeedbackHandlerFunction11250F31
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--user-feedback/FeedbackAPIIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIGETuserfeedbackFeedbackAPIIntegrationPermission7212A0C0:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIFeedbackHandlerFunction11250F31
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/user-feedback
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--user-feedback/FeedbackAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIGETuserfeedback217E4B62:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: GET /user-feedback
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETuserfeedbackFeedbackAPIIntegration10D18D1C
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--user-feedback/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTuserfeedbackFeedbackAPIIntegrationPermission8B121827:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIFeedbackHandlerFunction11250F31
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/user-feedback
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--user-feedback/FeedbackAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPOSTuserfeedback346A2E14:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: POST /user-feedback
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETuserfeedbackFeedbackAPIIntegration10D18D1C
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--user-feedback/Resource
  ChatbotAPIRestBackendHTTPAPIDELETEuserfeedbackFeedbackAPIIntegrationPermissionC80E77CB:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIFeedbackHandlerFunction11250F31
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/user-feedback
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/DELETE--user-feedback/FeedbackAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIDELETEuserfeedback8987C7EB:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: DELETE /user-feedback
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETuserfeedbackFeedbackAPIIntegration10D18D1C
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/DELETE--user-feedback/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTuserfeedbackdownloadfeedbackFeedbackDownloadAPIIntegrationDEBB68C3:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPIFeedbackHandlerFunction11250F31
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--user-feedback--download-feedback/FeedbackDownloadAPIIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTuserfeedbackdownloadfeedbackFeedbackDownloadAPIIntegrationPermissionD849BF69:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIFeedbackHandlerFunction11250F31
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/user-feedback/download-feedback
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--user-feedback--download-feedback/FeedbackDownloadAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPOSTuserfeedbackdownloadfeedbackCA74A429:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: POST /user-feedback/download-feedback
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIPOSTuserfeedbackdownloadfeedbackFeedbackDownloadAPIIntegrationDEBB68C3
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--user-feedback--download-feedback/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTs3knowledgebucketdataS3GetKnowledgeAPIIntegration59B60CEB:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPIGetS3KnowledgeFilesHandlerFunction70EEA016
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--s3-knowledge-bucket-data/S3GetKnowledgeAPIIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTs3knowledgebucketdataS3GetKnowledgeAPIIntegrationPermissionE44E77F5:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIGetS3KnowledgeFilesHandlerFunction70EEA016
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/s3-knowledge-bucket-data
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--s3-knowledge-bucket-data/S3GetKnowledgeAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPOSTs3knowledgebucketdata8DBDF102:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: POST /s3-knowledge-bucket-data
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIPOSTs3knowledgebucketdataS3GetKnowledgeAPIIntegration59B60CEB
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--s3-knowledge-bucket-data/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTs3testcasesbucketdataS3GetTestCasesAPIIntegrationE4F10991:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPIGetS3TestCasesFilesHandlerFunctionDFEB7C32
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--s3-test-cases-bucket-data/S3GetTestCasesAPIIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTs3testcasesbucketdataS3GetTestCasesAPIIntegrationPermissionBB11E9FA:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIGetS3TestCasesFilesHandlerFunctionDFEB7C32
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/s3-test-cases-bucket-data
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--s3-test-cases-bucket-data/S3GetTestCasesAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPOSTs3testcasesbucketdata80CAB7E2:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: POST /s3-test-cases-bucket-data
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIPOSTs3testcasesbucketdataS3GetTestCasesAPIIntegrationE4F10991
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--s3-test-cases-bucket-data/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTdeletes3fileS3DeleteAPIIntegration209DEDF2:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPIDeleteS3FilesHandlerFunctionAEF9C97C
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--delete-s3-file/S3DeleteAPIIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTdeletes3fileS3DeleteAPIIntegrationPermissionD19545C0:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIDeleteS3FilesHandlerFunctionAEF9C97C
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/delete-s3-file
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--delete-s3-file/S3DeleteAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPOSTdeletes3fileF8907447:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: POST /delete-s3-file
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIPOSTdeletes3fileS3DeleteAPIIntegration209DEDF2
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--delete-s3-file/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTsignedurlknowledgeS3UploadKnowledgeAPIIntegration3512608F:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPIUploadS3KnowledgeFilesHandlerFunction8F876BF4
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--signed-url-knowledge/S3UploadKnowledgeAPIIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTsignedurlknowledgeS3UploadKnowledgeAPIIntegrationPermissionEC75FC9A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIUploadS3KnowledgeFilesHandlerFunction8F876BF4
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/signed-url-knowledge
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--signed-url-knowledge/S3UploadKnowledgeAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPOSTsignedurlknowledgeE9430E82:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: POST /signed-url-knowledge
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIPOSTsignedurlknowledgeS3UploadKnowledgeAPIIntegration3512608F
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--signed-url-knowledge/Resource
  ChatbotAPIRestBackendHTTPAPIGETkbsyncstillsyncingKBSyncAPIIntegrationC6178933:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPISyncKBHandlerFunction0870A53A
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--kb-sync--still-syncing/KBSyncAPIIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIGETkbsyncstillsyncingKBSyncAPIIntegrationPermissionB7D954EA:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPISyncKBHandlerFunction0870A53A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/kb-sync/still-syncing
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--kb-sync--still-syncing/KBSyncAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIGETkbsyncstillsyncingE92CF64F:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: GET /kb-sync/still-syncing
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETkbsyncstillsyncingKBSyncAPIIntegrationC6178933
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--kb-sync--still-syncing/Resource
  ChatbotAPIRestBackendHTTPAPIGETkbsyncsynckbKBSyncAPIIntegration0EEB3798:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPISyncKBHandlerFunction0870A53A
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--kb-sync--sync-kb/KBSyncAPIIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIGETkbsyncsynckbKBSyncAPIIntegrationPermission1966E213:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPISyncKBHandlerFunction0870A53A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/kb-sync/sync-kb
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--kb-sync--sync-kb/KBSyncAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIGETkbsyncsynckb0925DCF6:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: GET /kb-sync/sync-kb
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETkbsyncsynckbKBSyncAPIIntegration0EEB3798
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--kb-sync--sync-kb/Resource
  ChatbotAPIRestBackendHTTPAPIGETkbsyncgetlastsyncKBLastSyncAPIIntegration33500EC3:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPISyncKBHandlerFunction0870A53A
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--kb-sync--get-last-sync/KBLastSyncAPIIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIGETkbsyncgetlastsyncKBLastSyncAPIIntegrationPermission12E1AB35:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPISyncKBHandlerFunction0870A53A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/kb-sync/get-last-sync
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--kb-sync--get-last-sync/KBLastSyncAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIGETkbsyncgetlastsyncD07C54BB:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: GET /kb-sync/get-last-sync
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETkbsyncgetlastsyncKBLastSyncAPIIntegration33500EC3
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--kb-sync--get-last-sync/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTevalresultshandlerEvalResultsHandlerIntegration97501E53:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPIEvalResultsHandlerFunction3A0AF1AA
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--eval-results-handler/EvalResultsHandlerIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTevalresultshandlerEvalResultsHandlerIntegrationPermissionB4316263:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIEvalResultsHandlerFunction3A0AF1AA
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/eval-results-handler
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--eval-results-handler/EvalResultsHandlerIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPOSTevalresultshandler1101FB36:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: POST /eval-results-handler
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIPOSTevalresultshandlerEvalResultsHandlerIntegration97501E53
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--eval-results-handler/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTevalrunhandlerEvalRunHandlerIntegrationB6E3C345:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPIStepFunctionsStackStartLlmEvalStateMachineFunction8C08028E
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--eval-run-handler/EvalRunHandlerIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTevalrunhandlerEvalRunHandlerIntegrationPermissionFE1FC54A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIStepFunctionsStackStartLlmEvalStateMachineFunction8C08028E
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/eval-run-handler
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--eval-run-handler/EvalRunHandlerIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPOSTevalrunhandlerCCFCCBCA:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: POST /eval-run-handler
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIPOSTevalrunhandlerEvalRunHandlerIntegrationB6E3C345
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--eval-run-handler/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTsignedurltestcasesS3UploadTestCasesAPIIntegration4F16E821:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPIUploadS3TestCasesFilesHandlerFunctionFF824AEA
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--signed-url-test-cases/S3UploadTestCasesAPIIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTsignedurltestcasesS3UploadTestCasesAPIIntegrationPermission889EC75F:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIUploadS3TestCasesFilesHandlerFunctionFF824AEA
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/signed-url-test-cases
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--signed-url-test-cases/S3UploadTestCasesAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPOSTsignedurltestcases884105E6:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: POST /signed-url-test-cases
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIPOSTsignedurltestcasesS3UploadTestCasesAPIIntegration4F16E821
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--signed-url-test-cases/Resource
  ChatbotAPIRestBackendHTTPAPIGETsystempromptshandlerSystemPromptsAPIIntegrationB0A003A0:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPISystemPromptsHandlerFunction8ED71FA6
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--system-prompts-handler/SystemPromptsAPIIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIGETsystempromptshandlerSystemPromptsAPIIntegrationPermission1208971D:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPISystemPromptsHandlerFunction8ED71FA6
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/system-prompts-handler
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--system-prompts-handler/SystemPromptsAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIGETsystempromptshandlerAD8867B9:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: GET /system-prompts-handler
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETsystempromptshandlerSystemPromptsAPIIntegrationB0A003A0
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--system-prompts-handler/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTsystempromptshandlerSystemPromptsAPIIntegrationPermission43BBEE43:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPISystemPromptsHandlerFunction8ED71FA6
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/system-prompts-handler
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--system-prompts-handler/SystemPromptsAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPOSTsystempromptshandler4E739A1C:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: POST /system-prompts-handler
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETsystempromptshandlerSystemPromptsAPIIntegrationB0A003A0
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--system-prompts-handler/Resource
  ChatbotAPIRestBackendHTTPAPIGETprofileUserProfileAPIIntegrationCAFB967D:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - ChatbotAPIUserProfileHandlerFunction5D95517A
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--profile/UserProfileAPIIntegration/Resource
  ChatbotAPIRestBackendHTTPAPIGETprofileUserProfileAPIIntegrationPermission37AF0111:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIUserProfileHandlerFunction5D95517A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/profile
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--profile/UserProfileAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIGETprofile666A3147:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: GET /profile
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETprofileUserProfileAPIIntegrationCAFB967D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--profile/Resource
  ChatbotAPIRestBackendHTTPAPIPUTprofileUserProfileAPIIntegrationPermission8AFF2942:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIUserProfileHandlerFunction5D95517A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/profile
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/PUT--profile/UserProfileAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPUTprofileD50B05DA:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: PUT /profile
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETprofileUserProfileAPIIntegrationCAFB967D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/PUT--profile/Resource
  ChatbotAPIRestBackendHTTPAPIOPTIONSprofileUserProfileAPIIntegrationPermission623A40C1:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIUserProfileHandlerFunction5D95517A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/profile
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/OPTIONS--profile/UserProfileAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIOPTIONSprofile5395612B:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: OPTIONS /profile
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETprofileUserProfileAPIIntegrationCAFB967D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/OPTIONS--profile/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTprofilekidsUserProfileAPIIntegrationPermission46C33B0C:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIUserProfileHandlerFunction5D95517A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/profile/kids
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--profile--kids/UserProfileAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPOSTprofilekidsD46145A4:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: POST /profile/kids
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETprofileUserProfileAPIIntegrationCAFB967D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--profile--kids/Resource
  ChatbotAPIRestBackendHTTPAPIOPTIONSprofilekidsUserProfileAPIIntegrationPermission3120E50A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIUserProfileHandlerFunction5D95517A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/profile/kids
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/OPTIONS--profile--kids/UserProfileAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIOPTIONSprofilekids6B916F5E:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: OPTIONS /profile/kids
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETprofileUserProfileAPIIntegrationCAFB967D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/OPTIONS--profile--kids/Resource
  ChatbotAPIRestBackendHTTPAPIGETprofilekidskidIddocumentsUserProfileAPIIntegrationPermissionC3739315:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIUserProfileHandlerFunction5D95517A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/profile/kids/{kidId}/documents
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--profile--kids--{kidId}--documents/UserProfileAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIGETprofilekidskidIddocuments2CFEF03E:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: GET /profile/kids/{kidId}/documents
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETprofileUserProfileAPIIntegrationCAFB967D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--profile--kids--{kidId}--documents/Resource
  ChatbotAPIRestBackendHTTPAPIOPTIONSprofilekidskidIddocumentsUserProfileAPIIntegrationPermission54BC782D:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIUserProfileHandlerFunction5D95517A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/profile/kids/{kidId}/documents
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/OPTIONS--profile--kids--{kidId}--documents/UserProfileAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIOPTIONSprofilekidskidIddocuments000C4D74:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: OPTIONS /profile/kids/{kidId}/documents
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETprofileUserProfileAPIIntegrationCAFB967D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/OPTIONS--profile--kids--{kidId}--documents/Resource
  ChatbotAPIRestBackendHTTPAPIGETdocumentsiepIdstatusUserProfileAPIIntegrationPermissionEAAD3EC6:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIUserProfileHandlerFunction5D95517A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/documents/{iepId}/status
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--documents--{iepId}--status/UserProfileAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIGETdocumentsiepIdstatus66654537:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: GET /documents/{iepId}/status
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETprofileUserProfileAPIIntegrationCAFB967D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/GET--documents--{iepId}--status/Resource
  ChatbotAPIRestBackendHTTPAPIOPTIONSdocumentsiepIdstatusUserProfileAPIIntegrationPermission42E55DDF:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIUserProfileHandlerFunction5D95517A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/documents/{iepId}/status
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/OPTIONS--documents--{iepId}--status/UserProfileAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIOPTIONSdocumentsiepIdstatus664E3F50:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: OPTIONS /documents/{iepId}/status
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETprofileUserProfileAPIIntegrationCAFB967D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/OPTIONS--documents--{iepId}--status/Resource
  ChatbotAPIRestBackendHTTPAPIPOSTsummaryUserProfileAPIIntegrationPermissionCDF3259D:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIUserProfileHandlerFunction5D95517A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/summary
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--summary/UserProfileAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIPOSTsummary0670448B:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: POST /summary
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETprofileUserProfileAPIIntegrationCAFB967D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/POST--summary/Resource
  ChatbotAPIRestBackendHTTPAPIOPTIONSsummaryUserProfileAPIIntegrationPermissionF9D71CB9:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIUserProfileHandlerFunction5D95517A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
            - /*/*/summary
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/OPTIONS--summary/UserProfileAPIIntegration-Permission
  ChatbotAPIRestBackendHTTPAPIOPTIONSsummaryC8016811:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
      AuthorizationType: JWT
      AuthorizerId:
        Ref: ChatbotAPIRestBackendHTTPAPIHTTPAuthorizerA78BC2D4
      RouteKey: OPTIONS /summary
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIRestBackendHTTPAPIGETprofileUserProfileAPIIntegrationCAFB967D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/RestBackend/HTTP-API/OPTIONS--summary/Resource
  ChatbotAPIWebsocketBackendWebSocketAPILogs53249297:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WebSocketAPILogs/Resource
  ChatbotAPIWebsocketBackendWSAPI75718B83:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ChatbotWebSocketAPI
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/Resource
  ChatbotAPIWebsocketBackendWSAPIgetChatbotResponseRoutechatbotResponseIntegrationPermission834EB9FE:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIChatHandlerFunctionEB04457E
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
            - /*getChatbotResponse
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/getChatbotResponse-Route/chatbotResponseIntegration-Permission
  ChatbotAPIWebsocketBackendWSAPIgetChatbotResponseRoutechatbotResponseIntegrationFC08302B:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
                - ChatbotAPIChatHandlerFunctionEB04457E
                - Arn
            - /invocations
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/getChatbotResponse-Route/chatbotResponseIntegration/Resource
  ChatbotAPIWebsocketBackendWSAPIgetChatbotResponseRoute6845E7AB:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
      AuthorizationType: NONE
      RouteKey: getChatbotResponse
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIWebsocketBackendWSAPIgetChatbotResponseRoutechatbotResponseIntegrationFC08302B
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/getChatbotResponse-Route/Resource
  ChatbotAPIWebsocketBackendWSAPIconnectRoutechatbotConnectionIntegrationPermissionDBFC3B32:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIChatHandlerFunctionEB04457E
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
            - /*$connect
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/$connect-Route/chatbotConnectionIntegration-Permission
  ChatbotAPIWebsocketBackendWSAPIconnectRoutechatbotConnectionIntegration0650E099:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
                - ChatbotAPIChatHandlerFunctionEB04457E
                - Arn
            - /invocations
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/$connect-Route/chatbotConnectionIntegration/Resource
  ChatbotAPIWebsocketBackendWSAPIconnectRoute09C2A76A:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: ChatbotAPIWebsocketBackendWSAPIWebSocketAuthorizer2C4C05F4
      RouteKey: $connect
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIWebsocketBackendWSAPIconnectRoutechatbotConnectionIntegration0650E099
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/$connect-Route/Resource
  ChatbotAPIWebsocketBackendWSAPIWebSocketAuthorizer2C4C05F4:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId:
        Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
      AuthorizerType: REQUEST
      AuthorizerUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
                - AuthorizationAuthorizationFunctionB35B7A4C
                - Arn
            - /invocations
      IdentitySource:
        - route.request.querystring.Authorization
      Name: WebSocketAuthorizer
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/WebSocketAuthorizer/Resource
  ChatbotAPIWebsocketBackendWSAPIAIEPStackChatbotAPIWebsocketBackendWSAPIWebSocketAuthorizerDB57D444Permission1ECBB30B:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - AuthorizationAuthorizationFunctionB35B7A4C
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
            - /authorizers/
            - Ref: ChatbotAPIWebsocketBackendWSAPIWebSocketAuthorizer2C4C05F4
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/AIEPStackChatbotAPIWebsocketBackendWSAPIWebSocketAuthorizerDB57D444-Permission
  ChatbotAPIWebsocketBackendWSAPIdefaultRoutechatbotConnectionIntegrationPermission7260E6BB:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIChatHandlerFunctionEB04457E
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
            - /*$default
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/$default-Route/chatbotConnectionIntegration-Permission
  ChatbotAPIWebsocketBackendWSAPIdefaultRoutechatbotConnectionIntegrationA521DB43:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
                - ChatbotAPIChatHandlerFunctionEB04457E
                - Arn
            - /invocations
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/$default-Route/chatbotConnectionIntegration/Resource
  ChatbotAPIWebsocketBackendWSAPIdefaultRouteA292ACAE:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
      AuthorizationType: NONE
      RouteKey: $default
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIWebsocketBackendWSAPIdefaultRoutechatbotConnectionIntegrationA521DB43
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/$default-Route/Resource
  ChatbotAPIWebsocketBackendWSAPIdisconnectRoutechatbotDisconnectionIntegrationPermissionC12B4986:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIChatHandlerFunctionEB04457E
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
            - /*$disconnect
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/$disconnect-Route/chatbotDisconnectionIntegration-Permission
  ChatbotAPIWebsocketBackendWSAPIdisconnectRoutechatbotDisconnectionIntegrationA720B7D3:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
                - ChatbotAPIChatHandlerFunctionEB04457E
                - Arn
            - /invocations
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/$disconnect-Route/chatbotDisconnectionIntegration/Resource
  ChatbotAPIWebsocketBackendWSAPIdisconnectRoute06B8C9C1:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
      AuthorizationType: NONE
      RouteKey: $disconnect
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIWebsocketBackendWSAPIdisconnectRoutechatbotDisconnectionIntegrationA720B7D3
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/$disconnect-Route/Resource
  ChatbotAPIWebsocketBackendWSAPIgenerateConflictReportRoutechatbotDisconnectionIntegrationPermission2BDA57F7:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPIChatHandlerFunctionEB04457E
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
            - /*generateConflictReport
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/generateConflictReport-Route/chatbotDisconnectionIntegration-Permission
  ChatbotAPIWebsocketBackendWSAPIgenerateConflictReportRoutechatbotDisconnectionIntegration9436BEB7:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
                - ChatbotAPIChatHandlerFunctionEB04457E
                - Arn
            - /invocations
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/generateConflictReport-Route/chatbotDisconnectionIntegration/Resource
  ChatbotAPIWebsocketBackendWSAPIgenerateConflictReportRoute503EA551:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
      AuthorizationType: NONE
      RouteKey: generateConflictReport
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ChatbotAPIWebsocketBackendWSAPIgenerateConflictReportRoutechatbotDisconnectionIntegration9436BEB7
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API/generateConflictReport-Route/Resource
  ChatbotAPIWebsocketBackendWSAPIprodD7F844E0:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
      AutoDeploy: true
      StageName: prod
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/WebsocketBackend/WS-API-prod/Resource
  ChatbotAPISessionHandlerFunctionServiceRole9405D10E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/SessionHandlerFunction/ServiceRole/Resource
  ChatbotAPISessionHandlerFunctionServiceRoleDefaultPolicy1844E408:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIChatHistoryTable86F70C1D
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIChatHistoryTable86F70C1D
                        - Arn
                    - /index/*
        Version: "2012-10-17"
      PolicyName: ChatbotAPISessionHandlerFunctionServiceRoleDefaultPolicy1844E408
      Roles:
        - Ref: ChatbotAPISessionHandlerFunctionServiceRole9405D10E
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/SessionHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPISessionHandlerFunctionF969576A:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 0dda322ad87390fe70bc8c2ae3da53e107d0207da42a90232df0774f7b9f97f6.zip
      Environment:
        Variables:
          DDB_TABLE_NAME:
            Ref: ChatbotAPIChatHistoryTable86F70C1D
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPISessionHandlerFunctionServiceRole9405D10E
          - Arn
      Runtime: python3.12
      Timeout: 30
    DependsOn:
      - ChatbotAPISessionHandlerFunctionServiceRoleDefaultPolicy1844E408
      - ChatbotAPISessionHandlerFunctionServiceRole9405D10E
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/SessionHandlerFunction/Resource
      aws:asset:path: asset.0dda322ad87390fe70bc8c2ae3da53e107d0207da42a90232df0774f7b9f97f6
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPISystemPromptsHandlerFunctionServiceRoleDC1F409B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/SystemPromptsHandlerFunction/ServiceRole/Resource
  ChatbotAPISystemPromptsHandlerFunctionServiceRoleDefaultPolicy9BE06D37:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIActiveSystemPromptsTable6B51A1C3
                  - Arn
              - Fn::GetAtt:
                  - ChatbotAPIStagedSystemPromptsTable33F4F68A
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIActiveSystemPromptsTable6B51A1C3
                        - Arn
                    - /index/*
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIStagedSystemPromptsTable33F4F68A
                        - Arn
                    - /index/*
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIActiveSystemPromptsTable6B51A1C3
                  - Arn
              - Fn::GetAtt:
                  - ChatbotAPIStagedSystemPromptsTable33F4F68A
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: ChatbotAPISystemPromptsHandlerFunctionServiceRoleDefaultPolicy9BE06D37
      Roles:
        - Ref: ChatbotAPISystemPromptsHandlerFunctionServiceRoleDC1F409B
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/SystemPromptsHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPISystemPromptsHandlerFunction8ED71FA6:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: d464d421dca8fa131f05e3d663be5cbb10f761e6dca0479cbd17b6803351789e.zip
      Environment:
        Variables:
          STAGED_SYSTEM_PROMPTS_TABLE:
            Ref: ChatbotAPIStagedSystemPromptsTable33F4F68A
          ACTIVE_SYSTEM_PROMPTS_TABLE:
            Ref: ChatbotAPIActiveSystemPromptsTable6B51A1C3
          DEFAULT_PROMPT: |-
            You are a helpful AI chatbot that will answer questions based on your knowledge. 
                    You have access to a search tool that you will use to look up answers to questions.
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPISystemPromptsHandlerFunctionServiceRoleDC1F409B
          - Arn
      Runtime: python3.12
    DependsOn:
      - ChatbotAPISystemPromptsHandlerFunctionServiceRoleDefaultPolicy9BE06D37
      - ChatbotAPISystemPromptsHandlerFunctionServiceRoleDC1F409B
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/SystemPromptsHandlerFunction/Resource
      aws:asset:path: asset.d464d421dca8fa131f05e3d663be5cbb10f761e6dca0479cbd17b6803351789e
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIChatHandlerFunctionServiceRoleF8F74DF8:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/ChatHandlerFunction/ServiceRole/Resource
  ChatbotAPIChatHandlerFunctionServiceRoleDefaultPolicy1212B8E8:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Effect: Allow
            Resource: "*"
          - Action: bedrock:Retrieve
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ChatbotAPIKnowledgeBase4F0696AC
                - KnowledgeBaseArn
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ChatbotAPISessionHandlerFunctionF969576A
                - Arn
          - Action: execute-api:ManageConnections
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":execute-api:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":"
                  - Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
                  - /*/*/@connections/*
        Version: "2012-10-17"
      PolicyName: ChatbotAPIChatHandlerFunctionServiceRoleDefaultPolicy1212B8E8
      Roles:
        - Ref: ChatbotAPIChatHandlerFunctionServiceRoleF8F74DF8
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/ChatHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIChatHandlerFunctionEB04457E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 95186419474076184944ec18be79cfc1fdf620fd000d270ba28bb0b6b0e03857.zip
      Environment:
        Variables:
          WEBSOCKET_API_ENDPOINT:
            Fn::Join:
              - ""
              - - https://
                - Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
                - .execute-api.
                - Ref: AWS::Region
                - "."
                - Ref: AWS::URLSuffix
                - /prod
          SESSION_HANDLER:
            Ref: ChatbotAPISessionHandlerFunctionF969576A
          SYSTEM_PROMPTS_HANDLER:
            Ref: ChatbotAPISystemPromptsHandlerFunction8ED71FA6
          KB_ID:
            Fn::GetAtt:
              - ChatbotAPIKnowledgeBase4F0696AC
              - KnowledgeBaseId
          CONFL_PROMPT: |-
            You are a knowledge expert looking to either identify conflicts among the 
                        above documents or assure the user that no conflicts exist. You are not looking for small 
                        syntatic or grammatical differences, but rather pointing out major factual inconsistencies. 
                        You can be confident about identifying a conflict between two documents if the conflict 
                        represents a major factual difference that would result in semantic differences between 
                        responses constructed with each respective decoment. If conflicts are detected, please format 
                        them in an organized list where each entry includes the names of the conflicting documents as 
                        well as the conflicting statements. Use each document's actual name from the source uri in 
                        this list.If there is no conflict please respond only with "no 
                        conflicts detected" Do not include any additional information. Only include identified 
                        conflicts that you are confident are factual inconsistencies. Do not include identified 
                        conflicts that you are not confident are real conflicts. Do not report conflicts that are not 
                        relevant to the user's query, which will be given below. Below is an example user query with 
                        examples of a relevant conflict, an irrelevant conflict, and a non conflict: 
                        <example_user_query> "Are state parks in Massachusetts open year-round, and are there any 
                        costs associated with access for residents?" </example_user_query> Example of a Relevant 
                        Conflict <conflict_example> Document A: "Massachusetts state parks are open year-round and 
                        free for all residents." Document B: "Massachusetts state parks are closed during the winter 
                        season." Conflict Reason: The statements directly conflict on whether parks remain open 
                        year-round, which is relevant to the user's query. inclusion: This conflict would be included 
                        as a conflict for the given user query. It is a clear factual conflict, and it is relevant to 
                        the example user query. </conflict_example> Example of a Non-Conflict <non_conflict_example> 
                        Document A: "Massachusetts state parks offer seasonal programs." Document B: "Some parks may 
                        require entrance fees for special events." Reason: These statements do not contradict each 
                        other. inclusion: This would not be included as a conflict for the given user query. It is 
                        not a factual conflict. </non_conflict_example> Example of an Irrelevant Conflict 
                        <irrelevant_conflict_example> Document C: "Parks in western Massachusetts do not allow pets 
                        on trails" Document D: "State parks in western Massachusetts allow pets on trails as long as 
                        they are leashed." Reason: While these statements conflict on whether pets are allowed at 
                        parks, niether statement is about year-round park access or costs to access parks, which is 
                        the focus of the user's query. inclusion: This would not be included as a conflict for the 
                        given user query. Although it is a factual conflict, it is not relevant to the given user 
                        query. </irrelevant_conflict_example>
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIChatHandlerFunctionServiceRoleF8F74DF8
          - Arn
      Runtime: nodejs20.x
      Timeout: 300
    DependsOn:
      - ChatbotAPIChatHandlerFunctionServiceRoleDefaultPolicy1212B8E8
      - ChatbotAPIChatHandlerFunctionServiceRoleF8F74DF8
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/ChatHandlerFunction/Resource
      aws:asset:path: asset.95186419474076184944ec18be79cfc1fdf620fd000d270ba28bb0b6b0e03857
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIFeedbackHandlerFunctionServiceRole4FD380A6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/FeedbackHandlerFunction/ServiceRole/Resource
  ChatbotAPIFeedbackHandlerFunctionServiceRoleDefaultPolicy8CD050DC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIUserFeedbackTableF734E54F
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIUserFeedbackTableF734E54F
                        - Arn
                    - /index/*
          - Action: s3:*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIFeedbackDownloadBucket5357D600
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIFeedbackDownloadBucket5357D600
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: ChatbotAPIFeedbackHandlerFunctionServiceRoleDefaultPolicy8CD050DC
      Roles:
        - Ref: ChatbotAPIFeedbackHandlerFunctionServiceRole4FD380A6
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/FeedbackHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIFeedbackHandlerFunction11250F31:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 37b267fcd9f57d45bc69460776413b4e0e780c79d9e9c369f9ec402f27747de7.zip
      Environment:
        Variables:
          FEEDBACK_TABLE:
            Ref: ChatbotAPIUserFeedbackTableF734E54F
          FEEDBACK_S3_DOWNLOAD:
            Ref: ChatbotAPIFeedbackDownloadBucket5357D600
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIFeedbackHandlerFunctionServiceRole4FD380A6
          - Arn
      Runtime: python3.12
      Timeout: 30
    DependsOn:
      - ChatbotAPIFeedbackHandlerFunctionServiceRoleDefaultPolicy8CD050DC
      - ChatbotAPIFeedbackHandlerFunctionServiceRole4FD380A6
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/FeedbackHandlerFunction/Resource
      aws:asset:path: asset.37b267fcd9f57d45bc69460776413b4e0e780c79d9e9c369f9ec402f27747de7
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIDeleteS3FilesHandlerFunctionServiceRole162C8442:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/DeleteS3FilesHandlerFunction/ServiceRole/Resource
  ChatbotAPIDeleteS3FilesHandlerFunctionServiceRoleDefaultPolicy1AE35FEF:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIKnowledgeSourceBucketD704DDFD
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIKnowledgeSourceBucketD704DDFD
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: ChatbotAPIDeleteS3FilesHandlerFunctionServiceRoleDefaultPolicy1AE35FEF
      Roles:
        - Ref: ChatbotAPIDeleteS3FilesHandlerFunctionServiceRole162C8442
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/DeleteS3FilesHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIDeleteS3FilesHandlerFunctionAEF9C97C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 482f1b73c8177dfba684cd2c0e0d0c3376fd06fbc38de7bdb682eab9decf3d15.zip
      Environment:
        Variables:
          BUCKET:
            Ref: ChatbotAPIKnowledgeSourceBucketD704DDFD
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIDeleteS3FilesHandlerFunctionServiceRole162C8442
          - Arn
      Runtime: python3.12
      Timeout: 30
    DependsOn:
      - ChatbotAPIDeleteS3FilesHandlerFunctionServiceRoleDefaultPolicy1AE35FEF
      - ChatbotAPIDeleteS3FilesHandlerFunctionServiceRole162C8442
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/DeleteS3FilesHandlerFunction/Resource
      aws:asset:path: asset.482f1b73c8177dfba684cd2c0e0d0c3376fd06fbc38de7bdb682eab9decf3d15
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIGetS3KnowledgeFilesHandlerFunctionServiceRole6258C17D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/GetS3KnowledgeFilesHandlerFunction/ServiceRole/Resource
  ChatbotAPIGetS3KnowledgeFilesHandlerFunctionServiceRoleDefaultPolicyAFAFB1C8:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIKnowledgeSourceBucketD704DDFD
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIKnowledgeSourceBucketD704DDFD
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: ChatbotAPIGetS3KnowledgeFilesHandlerFunctionServiceRoleDefaultPolicyAFAFB1C8
      Roles:
        - Ref: ChatbotAPIGetS3KnowledgeFilesHandlerFunctionServiceRole6258C17D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/GetS3KnowledgeFilesHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIGetS3KnowledgeFilesHandlerFunction70EEA016:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 7b3c73e885fe1f77f67b33ff1e93f36d1573dff08a32aa42aba5e35f2d30a0d8.zip
      Environment:
        Variables:
          BUCKET:
            Ref: ChatbotAPIKnowledgeSourceBucketD704DDFD
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIGetS3KnowledgeFilesHandlerFunctionServiceRole6258C17D
          - Arn
      Runtime: nodejs20.x
      Timeout: 30
    DependsOn:
      - ChatbotAPIGetS3KnowledgeFilesHandlerFunctionServiceRoleDefaultPolicyAFAFB1C8
      - ChatbotAPIGetS3KnowledgeFilesHandlerFunctionServiceRole6258C17D
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/GetS3KnowledgeFilesHandlerFunction/Resource
      aws:asset:path: asset.7b3c73e885fe1f77f67b33ff1e93f36d1573dff08a32aa42aba5e35f2d30a0d8
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIGetS3TestCasesFilesHandlerFunctionServiceRole157AEFD4:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/GetS3TestCasesFilesHandlerFunction/ServiceRole/Resource
  ChatbotAPIGetS3TestCasesFilesHandlerFunctionServiceRoleDefaultPolicy378930AA:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIEvalTestCasesBucket3A06FDF6
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvalTestCasesBucket3A06FDF6
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: ChatbotAPIGetS3TestCasesFilesHandlerFunctionServiceRoleDefaultPolicy378930AA
      Roles:
        - Ref: ChatbotAPIGetS3TestCasesFilesHandlerFunctionServiceRole157AEFD4
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/GetS3TestCasesFilesHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIGetS3TestCasesFilesHandlerFunctionDFEB7C32:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 999b24be9d3d8e4a914a0f4e64470f56194620470fe686be495ed5627ead25b3.zip
      Environment:
        Variables:
          BUCKET:
            Ref: ChatbotAPIEvalTestCasesBucket3A06FDF6
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIGetS3TestCasesFilesHandlerFunctionServiceRole157AEFD4
          - Arn
      Runtime: nodejs20.x
      Timeout: 30
    DependsOn:
      - ChatbotAPIGetS3TestCasesFilesHandlerFunctionServiceRoleDefaultPolicy378930AA
      - ChatbotAPIGetS3TestCasesFilesHandlerFunctionServiceRole157AEFD4
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/GetS3TestCasesFilesHandlerFunction/Resource
      aws:asset:path: asset.999b24be9d3d8e4a914a0f4e64470f56194620470fe686be495ed5627ead25b3
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPISyncKBHandlerFunctionServiceRole6B7CF9AB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/SyncKBHandlerFunction/ServiceRole/Resource
  ChatbotAPISyncKBHandlerFunctionServiceRoleDefaultPolicy6432CC2D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: bedrock:*
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ChatbotAPIKnowledgeBase4F0696AC
                - KnowledgeBaseArn
        Version: "2012-10-17"
      PolicyName: ChatbotAPISyncKBHandlerFunctionServiceRoleDefaultPolicy6432CC2D
      Roles:
        - Ref: ChatbotAPISyncKBHandlerFunctionServiceRole6B7CF9AB
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/SyncKBHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPISyncKBHandlerFunction0870A53A:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: fb80b739eddaf77e6a386a3d62e1886ed6b8587f56fae7244ed48dc4fadffa01.zip
      Environment:
        Variables:
          KB_ID:
            Fn::GetAtt:
              - ChatbotAPIKnowledgeBase4F0696AC
              - KnowledgeBaseId
          SOURCE:
            Fn::GetAtt:
              - ChatbotAPIS3DataSource7122E2EC
              - DataSourceId
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPISyncKBHandlerFunctionServiceRole6B7CF9AB
          - Arn
      Runtime: python3.12
      Timeout: 30
    DependsOn:
      - ChatbotAPISyncKBHandlerFunctionServiceRoleDefaultPolicy6432CC2D
      - ChatbotAPISyncKBHandlerFunctionServiceRole6B7CF9AB
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/SyncKBHandlerFunction/Resource
      aws:asset:path: asset.fb80b739eddaf77e6a386a3d62e1886ed6b8587f56fae7244ed48dc4fadffa01
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIUploadS3KnowledgeFilesHandlerFunctionServiceRoleFEF32DE4:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/UploadS3KnowledgeFilesHandlerFunction/ServiceRole/Resource
  ChatbotAPIUploadS3KnowledgeFilesHandlerFunctionServiceRoleDefaultPolicy0240F8C0:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIKnowledgeSourceBucketD704DDFD
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIKnowledgeSourceBucketD704DDFD
                        - Arn
                    - /*
          - Action: dynamodb:PutItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ChatbotAPIIepDocumentsTable6A6A0420
                - Arn
        Version: "2012-10-17"
      PolicyName: ChatbotAPIUploadS3KnowledgeFilesHandlerFunctionServiceRoleDefaultPolicy0240F8C0
      Roles:
        - Ref: ChatbotAPIUploadS3KnowledgeFilesHandlerFunctionServiceRoleFEF32DE4
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/UploadS3KnowledgeFilesHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIUploadS3KnowledgeFilesHandlerFunction8F876BF4:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: fae4de87722f04778eb54889f4edee6c04ecf9b21f21c9a0e2b9f97d9b43f6a0.zip
      Environment:
        Variables:
          BUCKET:
            Ref: ChatbotAPIKnowledgeSourceBucketD704DDFD
          IEP_DOCUMENTS_TABLE:
            Ref: ChatbotAPIIepDocumentsTable6A6A0420
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIUploadS3KnowledgeFilesHandlerFunctionServiceRoleFEF32DE4
          - Arn
      Runtime: nodejs20.x
      Timeout: 300
    DependsOn:
      - ChatbotAPIUploadS3KnowledgeFilesHandlerFunctionServiceRoleDefaultPolicy0240F8C0
      - ChatbotAPIUploadS3KnowledgeFilesHandlerFunctionServiceRoleFEF32DE4
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/UploadS3KnowledgeFilesHandlerFunction/Resource
      aws:asset:path: asset.fae4de87722f04778eb54889f4edee6c04ecf9b21f21c9a0e2b9f97d9b43f6a0
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIUploadS3TestCasesFilesHandlerFunctionServiceRole9DE76BD4:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/UploadS3TestCasesFilesHandlerFunction/ServiceRole/Resource
  ChatbotAPIUploadS3TestCasesFilesHandlerFunctionServiceRoleDefaultPolicyCE0D5DE8:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIEvalTestCasesBucket3A06FDF6
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvalTestCasesBucket3A06FDF6
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: ChatbotAPIUploadS3TestCasesFilesHandlerFunctionServiceRoleDefaultPolicyCE0D5DE8
      Roles:
        - Ref: ChatbotAPIUploadS3TestCasesFilesHandlerFunctionServiceRole9DE76BD4
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/UploadS3TestCasesFilesHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIUploadS3TestCasesFilesHandlerFunctionFF824AEA:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 96fff28ddda86e21c6ef842f2dcccc47ce31e3120e2994d9f0555a5e09a04384.zip
      Environment:
        Variables:
          BUCKET:
            Ref: ChatbotAPIEvalTestCasesBucket3A06FDF6
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIUploadS3TestCasesFilesHandlerFunctionServiceRole9DE76BD4
          - Arn
      Runtime: nodejs20.x
      Timeout: 30
    DependsOn:
      - ChatbotAPIUploadS3TestCasesFilesHandlerFunctionServiceRoleDefaultPolicyCE0D5DE8
      - ChatbotAPIUploadS3TestCasesFilesHandlerFunctionServiceRole9DE76BD4
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/UploadS3TestCasesFilesHandlerFunction/Resource
      aws:asset:path: asset.96fff28ddda86e21c6ef842f2dcccc47ce31e3120e2994d9f0555a5e09a04384
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIMetadataHandlerFunctionServiceRole6BDD0B8F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/MetadataHandlerFunction/ServiceRole/Resource
  ChatbotAPIMetadataHandlerFunctionServiceRoleDefaultPolicy46471608:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - bedrock:InvokeModel
              - bedrock:Retrieve
              - s3:*
            Effect: Allow
            Resource:
              - arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
              - Fn::GetAtt:
                  - ChatbotAPIKnowledgeBase4F0696AC
                  - KnowledgeBaseArn
              - Fn::GetAtt:
                  - ChatbotAPIKnowledgeSourceBucketD704DDFD
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIKnowledgeSourceBucketD704DDFD
                        - Arn
                    - /*
          - Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIIepDocumentsTable6A6A0420
                  - Arn
              - Fn::GetAtt:
                  - ChatbotAPIUserProfilesTable3923A78F
                  - Arn
          - Action: bedrock:StartIngestionJob
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ChatbotAPIKnowledgeBase4F0696AC
                - KnowledgeBaseArn
        Version: "2012-10-17"
      PolicyName: ChatbotAPIMetadataHandlerFunctionServiceRoleDefaultPolicy46471608
      Roles:
        - Ref: ChatbotAPIMetadataHandlerFunctionServiceRole6BDD0B8F
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/MetadataHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIMetadataHandlerFunction7E482D95:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: d405b835385737109a0c93f4a00bfc47870e259ab35287ce32a7e86ba476fb68.zip
      Environment:
        Variables:
          BUCKET:
            Ref: ChatbotAPIKnowledgeSourceBucketD704DDFD
          KB_ID:
            Fn::GetAtt:
              - ChatbotAPIKnowledgeBase4F0696AC
              - KnowledgeBaseId
          IEP_DOCUMENTS_TABLE:
            Ref: ChatbotAPIIepDocumentsTable6A6A0420
          KB_SOURCE_ID:
            Fn::GetAtt:
              - ChatbotAPIS3DataSource7122E2EC
              - DataSourceId
          USER_PROFILES_TABLE:
            Ref: ChatbotAPIUserProfilesTable3923A78F
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIMetadataHandlerFunctionServiceRole6BDD0B8F
          - Arn
      Runtime: python3.12
      Timeout: 900
    DependsOn:
      - ChatbotAPIMetadataHandlerFunctionServiceRoleDefaultPolicy46471608
      - ChatbotAPIMetadataHandlerFunctionServiceRole6BDD0B8F
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/MetadataHandlerFunction/Resource
      aws:asset:path: asset.d405b835385737109a0c93f4a00bfc47870e259ab35287ce32a7e86ba476fb68
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIEvalResultsHandlerFunctionServiceRole614B02E1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/EvalResultsHandlerFunction/ServiceRole/Resource
  ChatbotAPIEvalResultsHandlerFunctionServiceRoleDefaultPolicyBCE80E25:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIEvaluationResultsTableE72FCF7C
                  - Arn
              - Fn::GetAtt:
                  - ChatbotAPIEvaluationSummariesTableE9B95A54
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvaluationResultsTableE72FCF7C
                        - Arn
                    - /index/*
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvaluationSummariesTableE9B95A54
                        - Arn
                    - /index/*
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIEvaluationResultsTableE72FCF7C
                  - Arn
              - Fn::GetAtt:
                  - ChatbotAPIEvaluationSummariesTableE9B95A54
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvaluationResultsTableE72FCF7C
                        - Arn
                    - /index/*
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: ChatbotAPIEvalResultsHandlerFunctionServiceRoleDefaultPolicyBCE80E25
      Roles:
        - Ref: ChatbotAPIEvalResultsHandlerFunctionServiceRole614B02E1
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/EvalResultsHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIEvalResultsHandlerFunction3A0AF1AA:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: c4a22edda53524bb45bef15e9c2e057f5da541b54edfcde121906aa5cf58bdd7.zip
      Environment:
        Variables:
          EVALUATION_RESULTS_TABLE:
            Ref: ChatbotAPIEvaluationResultsTableE72FCF7C
          EVALUATION_SUMMARIES_TABLE:
            Ref: ChatbotAPIEvaluationSummariesTableE9B95A54
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIEvalResultsHandlerFunctionServiceRole614B02E1
          - Arn
      Runtime: python3.12
    DependsOn:
      - ChatbotAPIEvalResultsHandlerFunctionServiceRoleDefaultPolicyBCE80E25
      - ChatbotAPIEvalResultsHandlerFunctionServiceRole614B02E1
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/EvalResultsHandlerFunction/Resource
      aws:asset:path: asset.c4a22edda53524bb45bef15e9c2e057f5da541b54edfcde121906aa5cf58bdd7
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIStepFunctionsStackSplitEvalTestCasesFunctionServiceRole4EC95522:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/SplitEvalTestCasesFunction/ServiceRole/Resource
  ChatbotAPIStepFunctionsStackSplitEvalTestCasesFunctionServiceRoleDefaultPolicy918B0C7F:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIEvalTestCasesBucket3A06FDF6
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvalTestCasesBucket3A06FDF6
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: ChatbotAPIStepFunctionsStackSplitEvalTestCasesFunctionServiceRoleDefaultPolicy918B0C7F
      Roles:
        - Ref: ChatbotAPIStepFunctionsStackSplitEvalTestCasesFunctionServiceRole4EC95522
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/SplitEvalTestCasesFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIStepFunctionsStackSplitEvalTestCasesFunction39919AE2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 185580ec9b04e7adbe2a5bd921fcc32c83292938c6d421c36aa76c15a0f8fb98.zip
      Environment:
        Variables:
          TEST_CASES_BUCKET:
            Ref: ChatbotAPIEvalTestCasesBucket3A06FDF6
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIStepFunctionsStackSplitEvalTestCasesFunctionServiceRole4EC95522
          - Arn
      Runtime: python3.12
      Timeout: 30
    DependsOn:
      - ChatbotAPIStepFunctionsStackSplitEvalTestCasesFunctionServiceRoleDefaultPolicy918B0C7F
      - ChatbotAPIStepFunctionsStackSplitEvalTestCasesFunctionServiceRole4EC95522
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/SplitEvalTestCasesFunction/Resource
      aws:asset:path: asset.185580ec9b04e7adbe2a5bd921fcc32c83292938c6d421c36aa76c15a0f8fb98
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIStepFunctionsStackLlmEvalResultsHandlerFunctionServiceRole1D8C1651:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/LlmEvalResultsHandlerFunction/ServiceRole/Resource
  ChatbotAPIStepFunctionsStackLlmEvalResultsHandlerFunctionServiceRoleDefaultPolicy9896FA4A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIEvaluationResultsTableE72FCF7C
                  - Arn
              - Fn::GetAtt:
                  - ChatbotAPIEvaluationSummariesTableE9B95A54
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvaluationResultsTableE72FCF7C
                        - Arn
                    - /index/*
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvaluationSummariesTableE9B95A54
                        - Arn
                    - /index/*
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIEvalTestCasesBucket3A06FDF6
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvalTestCasesBucket3A06FDF6
                        - Arn
                    - /*
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIEvaluationResultsTableE72FCF7C
                  - Arn
              - Fn::GetAtt:
                  - ChatbotAPIEvaluationSummariesTableE9B95A54
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvaluationResultsTableE72FCF7C
                        - Arn
                    - /index/*
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: ChatbotAPIStepFunctionsStackLlmEvalResultsHandlerFunctionServiceRoleDefaultPolicy9896FA4A
      Roles:
        - Ref: ChatbotAPIStepFunctionsStackLlmEvalResultsHandlerFunctionServiceRole1D8C1651
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/LlmEvalResultsHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIStepFunctionsStackLlmEvalResultsHandlerFunction136BDFD9:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 33d1197dc3c53c4de07b439d9e820ceda2bc0678522f979e8cc1adbd57be62c1.zip
      Environment:
        Variables:
          EVAL_SUMMARIES_TABLE:
            Ref: ChatbotAPIEvaluationSummariesTableE9B95A54
          EVAL_RESULTS_TABLE:
            Ref: ChatbotAPIEvaluationResultsTableE72FCF7C
          TEST_CASES_BUCKET:
            Ref: ChatbotAPIEvalTestCasesBucket3A06FDF6
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIStepFunctionsStackLlmEvalResultsHandlerFunctionServiceRole1D8C1651
          - Arn
      Runtime: python3.12
      Timeout: 30
    DependsOn:
      - ChatbotAPIStepFunctionsStackLlmEvalResultsHandlerFunctionServiceRoleDefaultPolicy9896FA4A
      - ChatbotAPIStepFunctionsStackLlmEvalResultsHandlerFunctionServiceRole1D8C1651
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/LlmEvalResultsHandlerFunction/Resource
      aws:asset:path: asset.33d1197dc3c53c4de07b439d9e820ceda2bc0678522f979e8cc1adbd57be62c1
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIStepFunctionsStackGenerateResponseFunctionServiceRoleDB4F22D7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/GenerateResponseFunction/ServiceRole/Resource
  ChatbotAPIStepFunctionsStackGenerateResponseFunctionServiceRoleDefaultPolicyC1649F34:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Effect: Allow
            Resource: "*"
          - Action: bedrock:Retrieve
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ChatbotAPIKnowledgeBase4F0696AC
                - KnowledgeBaseArn
        Version: "2012-10-17"
      PolicyName: ChatbotAPIStepFunctionsStackGenerateResponseFunctionServiceRoleDefaultPolicyC1649F34
      Roles:
        - Ref: ChatbotAPIStepFunctionsStackGenerateResponseFunctionServiceRoleDB4F22D7
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/GenerateResponseFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIStepFunctionsStackGenerateResponseFunctionD9A0A53C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 6fcc3b12914245c6139e09f00f7032d680cf6c30c02b82b989d13d5233d85b63.zip
      Environment:
        Variables:
          PROMPT: |-
            You are a helpful AI chatbot that will answer questions based on your knowledge. 
                            You have access to a search tool that you will use to look up answers to questions.
          KB_ID:
            Fn::GetAtt:
              - ChatbotAPIKnowledgeBase4F0696AC
              - KnowledgeBaseId
          SYSTEM_PROMPTS_HANDLER_ARN:
            Ref: ChatbotAPISystemPromptsHandlerFunction8ED71FA6
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIStepFunctionsStackGenerateResponseFunctionServiceRoleDB4F22D7
          - Arn
      Runtime: nodejs20.x
      Timeout: 300
    DependsOn:
      - ChatbotAPIStepFunctionsStackGenerateResponseFunctionServiceRoleDefaultPolicyC1649F34
      - ChatbotAPIStepFunctionsStackGenerateResponseFunctionServiceRoleDB4F22D7
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/GenerateResponseFunction/Resource
      aws:asset:path: asset.6fcc3b12914245c6139e09f00f7032d680cf6c30c02b82b989d13d5233d85b63
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIStepFunctionsStackLlmEvaluationFunctionServiceRole0CAEFAC6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/LlmEvaluationFunction/ServiceRole/Resource
  ChatbotAPIStepFunctionsStackLlmEvaluationFunctionServiceRoleDefaultPolicy7A2FE1EC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:GetAuthorization
              - ecr:GetDownloadUrlForLayer
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIEvalTestCasesBucket3A06FDF6
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvalTestCasesBucket3A06FDF6
                        - Arn
                    - /*
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIStepFunctionsStackGenerateResponseFunctionD9A0A53C
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIStepFunctionsStackGenerateResponseFunctionD9A0A53C
                        - Arn
                    - :*
        Version: "2012-10-17"
      PolicyName: ChatbotAPIStepFunctionsStackLlmEvaluationFunctionServiceRoleDefaultPolicy7A2FE1EC
      Roles:
        - Ref: ChatbotAPIStepFunctionsStackLlmEvaluationFunctionServiceRole0CAEFAC6
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/LlmEvaluationFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIStepFunctionsStackLlmEvaluationFunction10EF6290:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:b089add15eb3ff77946a74463bc42c8b0d29aca054726c4ba65cd41df9170ba3
      Environment:
        Variables:
          GENERATE_RESPONSE_LAMBDA_NAME:
            Ref: ChatbotAPIStepFunctionsStackGenerateResponseFunctionD9A0A53C
          BEDROCK_MODEL_ID: anthropic.claude-3-haiku-20240307-v1:0
          TEST_CASES_BUCKET:
            Ref: ChatbotAPIEvalTestCasesBucket3A06FDF6
      MemorySize: 10240
      PackageType: Image
      Role:
        Fn::GetAtt:
          - ChatbotAPIStepFunctionsStackLlmEvaluationFunctionServiceRole0CAEFAC6
          - Arn
      Timeout: 900
    DependsOn:
      - ChatbotAPIStepFunctionsStackLlmEvaluationFunctionServiceRoleDefaultPolicy7A2FE1EC
      - ChatbotAPIStepFunctionsStackLlmEvaluationFunctionServiceRole0CAEFAC6
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/LlmEvaluationFunction/Resource
      aws:asset:path: asset.b089add15eb3ff77946a74463bc42c8b0d29aca054726c4ba65cd41df9170ba3
      aws:asset:dockerfile-path: Dockerfile
      aws:asset:property: Code.ImageUri
  ChatbotAPIStepFunctionsStackAggregateEvalResultsFunctionServiceRole965AF17A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/AggregateEvalResultsFunction/ServiceRole/Resource
  ChatbotAPIStepFunctionsStackAggregateEvalResultsFunctionServiceRoleDefaultPolicy3122953F:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIEvalTestCasesBucket3A06FDF6
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvalTestCasesBucket3A06FDF6
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: ChatbotAPIStepFunctionsStackAggregateEvalResultsFunctionServiceRoleDefaultPolicy3122953F
      Roles:
        - Ref: ChatbotAPIStepFunctionsStackAggregateEvalResultsFunctionServiceRole965AF17A
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/AggregateEvalResultsFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIStepFunctionsStackAggregateEvalResultsFunction755BD2CE:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 0c0c7a7d6e0aea9571089a8106845c45c803b724e587779b64c23b15401a0e6b.zip
      Environment:
        Variables:
          TEST_CASES_BUCKET:
            Ref: ChatbotAPIEvalTestCasesBucket3A06FDF6
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIStepFunctionsStackAggregateEvalResultsFunctionServiceRole965AF17A
          - Arn
      Runtime: python3.12
      Timeout: 30
    DependsOn:
      - ChatbotAPIStepFunctionsStackAggregateEvalResultsFunctionServiceRoleDefaultPolicy3122953F
      - ChatbotAPIStepFunctionsStackAggregateEvalResultsFunctionServiceRole965AF17A
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/AggregateEvalResultsFunction/Resource
      aws:asset:path: asset.0c0c7a7d6e0aea9571089a8106845c45c803b724e587779b64c23b15401a0e6b
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIStepFunctionsStackLlmEvalCleanupFunctionServiceRole898CEA1E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/LlmEvalCleanupFunction/ServiceRole/Resource
  ChatbotAPIStepFunctionsStackLlmEvalCleanupFunctionServiceRoleDefaultPolicy247A7932:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject
              - s3:DeleteObjects
              - s3:ListBucket
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIEvalTestCasesBucket3A06FDF6
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIEvalTestCasesBucket3A06FDF6
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: ChatbotAPIStepFunctionsStackLlmEvalCleanupFunctionServiceRoleDefaultPolicy247A7932
      Roles:
        - Ref: ChatbotAPIStepFunctionsStackLlmEvalCleanupFunctionServiceRole898CEA1E
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/LlmEvalCleanupFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIStepFunctionsStackLlmEvalCleanupFunction3AF7E668:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 078cfb42077c9671f9cd42158f567e7a7af21f9831435d07a94e6d882707ca91.zip
      Environment:
        Variables:
          TEST_CASES_BUCKET:
            Ref: ChatbotAPIEvalTestCasesBucket3A06FDF6
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIStepFunctionsStackLlmEvalCleanupFunctionServiceRole898CEA1E
          - Arn
      Runtime: python3.12
      Timeout: 30
    DependsOn:
      - ChatbotAPIStepFunctionsStackLlmEvalCleanupFunctionServiceRoleDefaultPolicy247A7932
      - ChatbotAPIStepFunctionsStackLlmEvalCleanupFunctionServiceRole898CEA1E
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/LlmEvalCleanupFunction/Resource
      aws:asset:path: asset.078cfb42077c9671f9cd42158f567e7a7af21f9831435d07a94e6d882707ca91
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIStepFunctionsStackEvaluationStateMachineRoleBB540967:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: states.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/EvaluationStateMachine/Role/Resource
  ChatbotAPIStepFunctionsStackEvaluationStateMachineRoleDefaultPolicy16C22430:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIStepFunctionsStackAggregateEvalResultsFunction755BD2CE
                  - Arn
              - Fn::GetAtt:
                  - ChatbotAPIStepFunctionsStackLlmEvalCleanupFunction3AF7E668
                  - Arn
              - Fn::GetAtt:
                  - ChatbotAPIStepFunctionsStackLlmEvalResultsHandlerFunction136BDFD9
                  - Arn
              - Fn::GetAtt:
                  - ChatbotAPIStepFunctionsStackLlmEvaluationFunction10EF6290
                  - Arn
              - Fn::GetAtt:
                  - ChatbotAPIStepFunctionsStackSplitEvalTestCasesFunction39919AE2
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIStepFunctionsStackAggregateEvalResultsFunction755BD2CE
                        - Arn
                    - :*
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIStepFunctionsStackLlmEvalCleanupFunction3AF7E668
                        - Arn
                    - :*
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIStepFunctionsStackLlmEvalResultsHandlerFunction136BDFD9
                        - Arn
                    - :*
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIStepFunctionsStackLlmEvaluationFunction10EF6290
                        - Arn
                    - :*
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIStepFunctionsStackSplitEvalTestCasesFunction39919AE2
                        - Arn
                    - :*
        Version: "2012-10-17"
      PolicyName: ChatbotAPIStepFunctionsStackEvaluationStateMachineRoleDefaultPolicy16C22430
      Roles:
        - Ref: ChatbotAPIStepFunctionsStackEvaluationStateMachineRoleBB540967
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/EvaluationStateMachine/Role/DefaultPolicy/Resource
  ChatbotAPIStepFunctionsStackEvaluationStateMachineD8D0972D:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Join:
          - ""
          - - '{"StartAt":"Split Test Cases","States":{"Split Test Cases":{"Next":"Process Test Cases","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - ChatbotAPIStepFunctionsStackSplitEvalTestCasesFunction39919AE2
                - Arn
            - '","Payload.$":"$"}},"Process Test Cases":{"Type":"Map","ResultPath":"$.partial_result_keys","Next":"Aggregate Results","ItemsPath":"$.chunk_keys","ItemSelector":{"chunk_key.$":"$$.Map.Item.Value.chunk_key","evaluation_id.$":"$$.Map.Item.Value.evaluation_id"},"ItemProcessor":{"ProcessorConfig":{"Mode":"INLINE"},"StartAt":"Evaluate Test Cases","States":{"Evaluate Test Cases":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - ChatbotAPIStepFunctionsStackLlmEvaluationFunction10EF6290
                - Arn
            - '","Payload.$":"$"}}}},"MaxConcurrency":5},"Aggregate Results":{"Next":"Save Evaluation Results","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - ChatbotAPIStepFunctionsStackAggregateEvalResultsFunction755BD2CE
                - Arn
            - '","Payload":{"partial_result_keys.$":"$.partial_result_keys","evaluation_id.$":"$.evaluation_id","evaluation_name.$":"$.evaluation_name","test_cases_key.$":"$.test_cases_key"}}},"Save Evaluation Results":{"Next":"Cleanup Chunks","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - ChatbotAPIStepFunctionsStackLlmEvalResultsHandlerFunction136BDFD9
                - Arn
            - '","Payload":{"evaluation_id.$":"$.evaluation_id","evaluation_name.$":"$.evaluation_name","average_similarity.$":"$.average_similarity","average_relevance.$":"$.average_relevance","average_correctness.$":"$.average_correctness","total_questions.$":"$.total_questions","detailed_results_s3_key.$":"$.detailed_results_s3_key","test_cases_key.$":"$.test_cases_key"}}},"Cleanup Chunks":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - ChatbotAPIStepFunctionsStackLlmEvalCleanupFunction3AF7E668
                - Arn
            - '","Payload":{"body.$":"$.body"}}}},"TimeoutSeconds":3600}'
      RoleArn:
        Fn::GetAtt:
          - ChatbotAPIStepFunctionsStackEvaluationStateMachineRoleBB540967
          - Arn
    DependsOn:
      - ChatbotAPIStepFunctionsStackEvaluationStateMachineRoleDefaultPolicy16C22430
      - ChatbotAPIStepFunctionsStackEvaluationStateMachineRoleBB540967
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/EvaluationStateMachine/Resource
  ChatbotAPIStepFunctionsStackStartLlmEvalStateMachineFunctionServiceRole5018C7CE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/StartLlmEvalStateMachineFunction/ServiceRole/Resource
  ChatbotAPIStepFunctionsStackStartLlmEvalStateMachineFunctionServiceRoleDefaultPolicy5899CB37:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Ref: ChatbotAPIStepFunctionsStackEvaluationStateMachineD8D0972D
        Version: "2012-10-17"
      PolicyName: ChatbotAPIStepFunctionsStackStartLlmEvalStateMachineFunctionServiceRoleDefaultPolicy5899CB37
      Roles:
        - Ref: ChatbotAPIStepFunctionsStackStartLlmEvalStateMachineFunctionServiceRole5018C7CE
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/StartLlmEvalStateMachineFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIStepFunctionsStackStartLlmEvalStateMachineFunction8C08028E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 28bd896e126f11ff70dc3df49e454eb33b350311d10b01f7ea82dec19c58bf98.zip
      Environment:
        Variables:
          STATE_MACHINE_ARN:
            Ref: ChatbotAPIStepFunctionsStackEvaluationStateMachineD8D0972D
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIStepFunctionsStackStartLlmEvalStateMachineFunctionServiceRole5018C7CE
          - Arn
      Runtime: nodejs20.x
      Timeout: 30
    DependsOn:
      - ChatbotAPIStepFunctionsStackStartLlmEvalStateMachineFunctionServiceRoleDefaultPolicy5899CB37
      - ChatbotAPIStepFunctionsStackStartLlmEvalStateMachineFunctionServiceRole5018C7CE
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/StepFunctionsStack/StartLlmEvalStateMachineFunction/Resource
      aws:asset:path: asset.28bd896e126f11ff70dc3df49e454eb33b350311d10b01f7ea82dec19c58bf98
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPIUserProfileHandlerFunctionServiceRoleB0ED3836:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/UserProfileHandlerFunction/ServiceRole/Resource
  ChatbotAPIUserProfileHandlerFunctionServiceRoleDefaultPolicyB6A40528:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ChatbotAPIIepDocumentsTable6A6A0420
                  - Arn
              - Fn::GetAtt:
                  - ChatbotAPIUserProfilesTable3923A78F
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIIepDocumentsTable6A6A0420
                        - Arn
                    - /index/*
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ChatbotAPIUserProfilesTable3923A78F
                        - Arn
                    - /index/*
        Version: "2012-10-17"
      PolicyName: ChatbotAPIUserProfileHandlerFunctionServiceRoleDefaultPolicyB6A40528
      Roles:
        - Ref: ChatbotAPIUserProfileHandlerFunctionServiceRoleB0ED3836
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/UserProfileHandlerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPIUserProfileHandlerFunction5D95517A:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 3a8c8e717031c59b3347a1c5265ca5c96e5aca7c3e6cd4ef47bd5ad4aed86d64.zip
      Environment:
        Variables:
          USER_PROFILES_TABLE:
            Ref: ChatbotAPIUserProfilesTable3923A78F
          IEP_DOCUMENTS_TABLE:
            Ref: ChatbotAPIIepDocumentsTable6A6A0420
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPIUserProfileHandlerFunctionServiceRoleB0ED3836
          - Arn
      Runtime: python3.12
      Timeout: 300
    DependsOn:
      - ChatbotAPIUserProfileHandlerFunctionServiceRoleDefaultPolicyB6A40528
      - ChatbotAPIUserProfileHandlerFunctionServiceRoleB0ED3836
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/UserProfileHandlerFunction/Resource
      aws:asset:path: asset.3a8c8e717031c59b3347a1c5265ca5c96e5aca7c3e6cd4ef47bd5ad4aed86d64
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPICognitoTriggerFunctionServiceRole7A87219B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/CognitoTriggerFunction/ServiceRole/Resource
  ChatbotAPICognitoTriggerFunctionServiceRoleDefaultPolicy84324111:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:PutItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ChatbotAPIUserProfilesTable3923A78F
                - Arn
        Version: "2012-10-17"
      PolicyName: ChatbotAPICognitoTriggerFunctionServiceRoleDefaultPolicy84324111
      Roles:
        - Ref: ChatbotAPICognitoTriggerFunctionServiceRole7A87219B
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/CognitoTriggerFunction/ServiceRole/DefaultPolicy/Resource
  ChatbotAPICognitoTriggerFunctionBF558261:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 3a8c8e717031c59b3347a1c5265ca5c96e5aca7c3e6cd4ef47bd5ad4aed86d64.zip
      Environment:
        Variables:
          USER_PROFILES_TABLE:
            Ref: ChatbotAPIUserProfilesTable3923A78F
      Handler: cognito_trigger.lambda_handler
      Role:
        Fn::GetAtt:
          - ChatbotAPICognitoTriggerFunctionServiceRole7A87219B
          - Arn
      Runtime: python3.12
      Timeout: 30
    DependsOn:
      - ChatbotAPICognitoTriggerFunctionServiceRoleDefaultPolicy84324111
      - ChatbotAPICognitoTriggerFunctionServiceRole7A87219B
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/CognitoTriggerFunction/Resource
      aws:asset:path: asset.3a8c8e717031c59b3347a1c5265ca5c96e5aca7c3e6cd4ef47bd5ad4aed86d64
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ChatbotAPICognitoTriggerFunctionCognitoInvocationDB33542E:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ChatbotAPICognitoTriggerFunctionBF558261
          - Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - AuthorizationUserPool114F25B4
          - Arn
    Metadata:
      aws:cdk:path: AIEPStack/ChatbotAPI/CognitoTriggerFunction/CognitoInvocation
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 2eb6a831b107939f63cfebf68e6316e1a40f79fc99cae0fee9b333bac8d29bc4.zip
      Timeout: 900
      MemorySize: 128
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
          - Arn
      Runtime: nodejs18.x
      Description:
        Fn::Join:
          - ""
          - - "Lambda function for auto-deleting objects in "
            - Ref: ChatbotAPIKnowledgeSourceBucketD704DDFD
            - " S3 bucket."
    DependsOn:
      - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
    Metadata:
      aws:cdk:path: AIEPStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler
      aws:asset:path: asset.2eb6a831b107939f63cfebf68e6316e1a40f79fc99cae0fee9b333bac8d29bc4
      aws:asset:property: Code
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: AIEPStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              notification_configuration = props["NotificationConfiguration"]
              managed = props.get('Managed', 'true').lower() == 'true'
              stack_id = event['StackId']
              old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
              if managed:
                config = handle_managed(event["RequestType"], notification_configuration)
              else:
                config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
              s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
            def with_id(n):
              n['Id'] = f"{stack_id}-{hash(json.dumps(n, sort_keys=True))}"
              return n

            external_notifications = {}
            existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
            for t in CONFIGURATION_TYPES:
              if request_type == 'Update':
                  ids = [with_id(n) for n in old.get(t, [])]
                  old_incoming_ids = [n['Id'] for n in ids]
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'] in old_incoming_ids]
              elif request_type == 'Delete':
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]
              elif request_type == 'Create':
                  external_notifications[t] = [n for n in existing_notifications.get(t, [])]
            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            if request_type == 'Delete':
              return external_notifications

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.11
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: AIEPStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  UserInterfaceWebsiteLogsBucket54728780:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AIEPStack/UserInterface/WebsiteLogsBucket/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: Bucket is the server access logs bucket for websiteBucket.
            id: AwsSolutions-S1
  UserInterfaceWebsiteLogsBucketPolicyB99816BB:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: UserInterfaceWebsiteLogsBucket54728780
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - UserInterfaceWebsiteLogsBucket54728780
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - UserInterfaceWebsiteLogsBucket54728780
                        - Arn
                    - /*
          - Action: s3:PutObject
            Condition:
              ArnLike:
                aws:SourceArn:
                  Fn::GetAtt:
                    - UserInterfaceWebsiteBucket2BDEA247
                    - Arn
              StringEquals:
                aws:SourceAccount:
                  Ref: AWS::AccountId
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - UserInterfaceWebsiteLogsBucket54728780
                      - Arn
                  - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AIEPStack/UserInterface/WebsiteLogsBucket/Policy/Resource
  UserInterfaceWebsiteBucket2BDEA247:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName:
          Ref: UserInterfaceWebsiteLogsBucket54728780
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: aws-cdk:cr-owned:77d35c81
          Value: "true"
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AIEPStack/UserInterface/WebsiteBucket/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: OAI is configured for read.
            id: AwsSolutions-S5
  UserInterfaceWebsiteBucketPolicyEE27C04B:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: UserInterfaceWebsiteBucket2BDEA247
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - UserInterfaceWebsiteBucket2BDEA247
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - UserInterfaceWebsiteBucket2BDEA247
                        - Arn
                    - /*
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Principal:
              CanonicalUser:
                Fn::GetAtt:
                  - UserInterfaceWebsiteS3OAI283F6647
                  - S3CanonicalUserId
            Resource:
              - Fn::GetAtt:
                  - UserInterfaceWebsiteBucket2BDEA247
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - UserInterfaceWebsiteBucket2BDEA247
                        - Arn
                    - /*
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              CanonicalUser:
                Fn::GetAtt:
                  - UserInterfaceWebsiteS3OAI283F6647
                  - S3CanonicalUserId
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - UserInterfaceWebsiteBucket2BDEA247
                      - Arn
                  - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AIEPStack/UserInterface/WebsiteBucket/Policy/Resource
  UserInterfaceWebsiteS3OAI283F6647:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Allows CloudFront to reach the bucket
    Metadata:
      aws:cdk:path: AIEPStack/UserInterface/Website/S3OAI/Resource
  UserInterfaceWebsiteDistributionLogsBucket932D61CF:
    Type: AWS::S3::Bucket
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/UserInterface/Website/DistributionLogsBucket/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: Bucket is the server access logs bucket for websiteBucket.
            id: AwsSolutions-S1
  UserInterfaceWebsiteDistributionLogsBucketPolicyD3DF8844:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: UserInterfaceWebsiteDistributionLogsBucket932D61CF
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - UserInterfaceWebsiteDistributionLogsBucket932D61CF
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - UserInterfaceWebsiteDistributionLogsBucket932D61CF
                        - Arn
                    - /*
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutBucketPolicy
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - UserInterfaceWebsiteDistributionLogsBucket932D61CF
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - UserInterfaceWebsiteDistributionLogsBucket932D61CF
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AIEPStack/UserInterface/Website/DistributionLogsBucket/Policy/Resource
  UserInterfaceWebsiteDistributionLogsBucketAutoDeleteObjectsCustomResourceCBBE4A16:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: UserInterfaceWebsiteDistributionLogsBucket932D61CF
    DependsOn:
      - UserInterfaceWebsiteDistributionLogsBucketPolicyD3DF8844
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/UserInterface/Website/DistributionLogsBucket/AutoDeleteObjectsCustomResource/Default
  UserInterfaceWebsiteDistributionCFDistributionBCE5BC0C:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CacheBehaviors:
          - AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            DefaultTTL: 0
            ForwardedValues:
              Headers:
                - Referer
                - Origin
                - Authorization
                - Content-Type
                - x-forwarded-user
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
              QueryString: true
            MaxTTL: 300
            MinTTL: 0
            PathPattern: /chatbot/files/*
            TargetOriginId: origin2
            ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 3600
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 86400
          MinTTL: 300
          TargetOriginId: origin1
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2and3
        IPV6Enabled: true
        Logging:
          Bucket:
            Fn::GetAtt:
              - UserInterfaceWebsiteDistributionLogsBucket932D61CF
              - RegionalDomainName
          IncludeCookies: false
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName:
              Fn::GetAtt:
                - UserInterfaceWebsiteBucket2BDEA247
                - RegionalDomainName
            Id: origin1
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                  - ""
                  - - origin-access-identity/cloudfront/
                    - Ref: UserInterfaceWebsiteS3OAI283F6647
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName:
              Fn::GetAtt:
                - UserInterfaceWebsiteBucket2BDEA247
                - RegionalDomainName
            Id: origin2
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                  - ""
                  - - origin-access-identity/cloudfront/
                    - Ref: UserInterfaceWebsiteS3OAI283F6647
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
    Metadata:
      aws:cdk:path: AIEPStack/UserInterface/Website/Distribution/CFDistribution
      cdk_nag:
        rules_to_suppress:
          - reason: No geo restrictions
            id: AwsSolutions-CFR1
          - reason: WAF not required due to configured Cognito auth.
            id: AwsSolutions-CFR2
          - reason: TLS 1.2 is the default.
            id: AwsSolutions-CFR4
  UserInterfaceUserInterfaceDeploymentAwsCliLayerDB546DB8:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip
      Description: /opt/awscli/aws
    Metadata:
      aws:cdk:path: AIEPStack/UserInterface/UserInterfaceDeployment/AwsCliLayer/Resource
      aws:asset:path: asset.3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip
      aws:asset:is-bundled: false
      aws:asset:property: Content
  UserInterfaceUserInterfaceDeploymentCustomResource05D90D2B:
    Type: Custom::CDKBucketDeployment
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536
          - Arn
      SourceBucketNames:
        - Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        - Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
      SourceObjectKeys:
        - a376e87b867704f561b9cb3bca9199085fe702740e226223ac6d11f97f4a3d34.zip
        - 8f52031d7bb680666cdbd9eadadacbaef15f157723b0a4cc621cbbd048c562ef.zip
      SourceMarkers:
        - {}
        - <<marker:0xbaba:0>>:
            Ref: AWS::Region
          <<marker:0xbaba:1>>:
            Ref: AuthorizationUserPool114F25B4
          <<marker:0xbaba:2>>:
            Ref: AuthorizationUserPoolClient8E2989BE
          <<marker:0xbaba:3>>:
            Ref: AWS::Region
          <<marker:0xbaba:4>>:
            Fn::GetAtt:
              - UserInterfaceWebsiteDistributionCFDistributionBCE5BC0C
              - DomainName
          <<marker:0xbaba:5>>:
            Fn::GetAtt:
              - UserInterfaceWebsiteDistributionCFDistributionBCE5BC0C
              - DomainName
          <<marker:0xbaba:6>>:
            Ref: ChatbotAPIRestBackendHTTPAPI6A6C7FF4
          <<marker:0xbaba:7>>:
            Ref: AWS::Region
          <<marker:0xbaba:8>>:
            Ref: AWS::URLSuffix
          <<marker:0xbaba:9>>:
            Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
          <<marker:0xbaba:10>>:
            Ref: AWS::Region
          <<marker:0xbaba:11>>:
            Ref: AWS::URLSuffix
      DestinationBucketName:
        Ref: UserInterfaceWebsiteBucket2BDEA247
      Prune: false
      DistributionId:
        Ref: UserInterfaceWebsiteDistributionCFDistributionBCE5BC0C
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AIEPStack/UserInterface/UserInterfaceDeployment/CustomResource/Default
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AIEPStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":s3:::"
                    - Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
                    - /*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":s3:::"
                    - Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - UserInterfaceWebsiteBucket2BDEA247
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - UserInterfaceWebsiteBucket2BDEA247
                        - Arn
                    - /*
          - Action:
              - cloudfront:CreateInvalidation
              - cloudfront:GetInvalidation
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF
      Roles:
        - Ref: CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
    Metadata:
      aws:cdk:path: AIEPStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 2d56e153cac88d3e0c2f842e8e6f6783b8725bf91f95e0673b4725448a56e96d.zip
      Environment:
        Variables:
          AWS_CA_BUNDLE: /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
      Handler: index.handler
      Layers:
        - Ref: UserInterfaceUserInterfaceDeploymentAwsCliLayerDB546DB8
      Role:
        Fn::GetAtt:
          - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
          - Arn
      Runtime: python3.9
      Timeout: 900
    DependsOn:
      - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF
      - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
    Metadata:
      aws:cdk:path: AIEPStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource
      aws:asset:path: asset.2d56e153cac88d3e0c2f842e8e6f6783b8725bf91f95e0673b4725448a56e96d
      aws:asset:is-bundled: false
      aws:asset:property: Code
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/21UyW7bMBD9lt4ZNk0K9OzYSGvUQQK7y1GgqbHMmOIIXGyogv69Q1KSlSCneW8Wcjbyjn/5estvP4mLu5Hl6UarPe92XsgTI1XRSayM8si73w7sC6Jmy4OZ8AhWWAtl5qZBM9KlVmD83CFreqZEzbstaojGJF9QK9lGmlHPtKj3peBdVIGtlXMKDXsMRvoISD3hFcoT2HUtKpjbN6IF+wdsCtwpU2nwOEX1zN0XnXAOvOOLKFgJjca2phT5Q6Aj/WpSRG/eZe2DcMAyjNcMKItrHXPes7I1osaS+vxL7HPdCfQMGzAOhJVHatIZrAbnUtVL1BqmYnYgg1W+vV6wkJJcxwv2UFpqQ4r8afCioawgZUqKlfBih8FKuk80qhIeLqI93/Huh/fNolHpPBKR0iJUKSqDqNpi8BmtjYfKijGrd/Tqtwj+iFb9A5uOvrK/sN/Fcfl43URy4ETnx14DPjgkpUi7ghX1bIPVd4uhSbMfcM9A2mKY8mxP8sDJxrfQoKNtt23qlvPQHIYVcYUX7uT4Jq3i2pzx9M6Bd0+iYZSFhychj8qMjZt4z6TGUB4s0lZ1z1ZVapjcuqS9oonGiGX0eYw+H3tMZqp8pZy3ah/Gps9537MtuDRplkqMDaLNj37PwTeBNjY4j/XkFac2YplMhR244y8Wz6qMM3wTNKpTw/I7LXR8bAV9H1Irvrg4eurp/aXq0JQqvzmDJfBX9/l8d8+/0Rf06pS6sYHKrIFvs/wPBOVpo58EAAA=
    Metadata:
      aws:cdk:path: AIEPStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  AuthorizationUserPoolIDA8611C6E:
    Value:
      Ref: AuthorizationUserPool114F25B4
  AuthorizationUserPoolClientIDC710EFA7:
    Value:
      Ref: AuthorizationUserPoolClient8E2989BE
  ChatbotAPIWebsocketBackendWebSocketURL2D48AED8:
    Description: WebSocket API URL
    Value:
      Fn::Join:
        - ""
        - - wss://
          - Ref: ChatbotAPIWebsocketBackendWSAPI75718B83
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /prod
  ChatbotAPIWSAPIapiEndpoint565B66F1:
    Value:
      Fn::GetAtt:
        - ChatbotAPIWebsocketBackendWSAPI75718B83
        - ApiEndpoint
  ChatbotAPIHTTPAPIapiEndpoint8290A8FE:
    Value:
      Fn::GetAtt:
        - ChatbotAPIRestBackendHTTPAPI6A6C7FF4
        - ApiEndpoint
  UserInterfaceWebsiteUserInterfaceDomainNameE43D2FB1:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Fn::GetAtt:
              - UserInterfaceWebsiteDistributionCFDistributionBCE5BC0C
              - DomainName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]

